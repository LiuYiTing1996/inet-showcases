<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/inet/showcases/wireless/coexistence/results/*Only-*.vec"/>
        <input pattern="/inet/showcases/wireless/coexistence/results/*Only-*.sca"/>
        <input pattern="/inet/showcases/wireless/coexistence/results/ParameterStudy-aUnitBackoffPeriod=*-#*.vec"/>
        <input pattern="/inet/showcases/wireless/coexistence/results/ParameterStudy-aUnitBackoffPeriod=*-#*.sca"/>
        <input pattern="results/Coexistence-*.vec"/>
        <input pattern="results/Coexistence-*.sca"/>
    </inputs>
    <charts>
        <chart name="Wifi performance" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df1)&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WifiOnly&quot;, &quot;Coexistence&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+Wpan coexistence&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df1)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wifi performance"/>
        </chart>
        <chart name="Wpan performance" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df2)&#10;&#10;# Reordering the rows&#10;df2 = df2.reindex([&quot;WpanOnly&quot;, &quot;Coexistence&quot;])&#10;&#10;# renaming the row and column labels&#10;df2.columns=[&quot;Number of packets received&quot;]&#10;df2.index=[&quot;Wpan only&quot;, &quot;Wifi+Wpan coexistence&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df2)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wpan performance"/>
        </chart>
    </charts>
</analysis>
