<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/inet/showcases/wireless/qos/results/RealisticBitrateQos-*.vec"/>
        <input pattern="/inet/showcases/wireless/qos/results/RealisticBitrateQos-*.sca"/>
    </inputs>
    <charts>
        <chart name="End-to-end delay, realistic bitrate qos" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import chart&#10;&#10;filter_string = &quot;&quot;&quot;((module(*.server.app[0]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[1]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[2]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[3]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*) AND file(*RealisticBitrateQos-*)))&quot;&quot;&quot;&#10;&#10;df = results.getVectors(filter_string)&#10;&#10;df = results.transform_results(df)&#10;&#10;modulenames = list(df.index.get_level_values('module'))&#10;props = chart.getProperties()&#10;&#10;names = [props[&quot;Line.Name/&quot; + i] for i in modulenames]&#10;&#10;# keys = [&quot;Line.Name/&quot; + i for i in modulenames]&#10;# names = [props[k] if k in props else &quot;default&quot; for k in keys]&#10;&#10;&#10;print(names)&#10;df[('attr','title')] = names&#10;chart.plotVectors(df)&#10;&#10;chart.setProperty('X.Axis.Title', 'Time')&#10;chart.setProperty('Graph.Title', chart.getName())&#10;&#10;chart.setProperties(chart.getProperties())&#10;# chart.setProperty('Line.Title/Qos-Throughput.server.app[3]', 'voice')&#10;print(chart.getProperties())&#10;print(chart.getDefaultProperties())&#10;" type="LineChart">
            <property name="Graph.Title" value="End-to-end delay, realistic bitrate qos"/>
            <property name="X.Axis.Title" value="Time [s]"/>
            <property name="Y.Axis.Title" value="End-to-end delay [s]"/>
            <property name="X.Axis.Min" value="0.5"/>
            <property name="Line.Name/QosThroughput.server.app[0]" value="background"/>
            <property name="Line.Name/QosThroughput.server.app[1]" value="best effort"/>
            <property name="Line.Name/QosThroughput.server.app[2]" value="video"/>
            <property name="Line.Name/QosThroughput.server.app[3]" value="voice"/>
            <property name="Line.Name/QosShowcase.server.app[0]" value="background"/>
            <property name="Line.Name/QosShowcase.server.app[1]" value="best effort"/>
            <property name="Line.Name/QosShowcase.server.app[2]" value="video"/>
            <property name="Line.Name/QosShowcase.server.app[3]" value="voice"/>
        </chart>
        <chart name="Instantaneous packet delay variation, realistic bitrate qos" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import chart&#10;&#10;filter_string = &quot;&quot;&quot;((module(*.server.app[0]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[1]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[2]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[3]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*)))&quot;&quot;&quot;&#10;&#10;df = results.getVectors(filter_string)&#10;&#10;df = results.transform_results(df)&#10;&#10;modulenames = list(df.index.get_level_values('module'))&#10;props = chart.getProperties()&#10;&#10;names = [props[&quot;Line.Name/&quot; + i] for i in modulenames]&#10;&#10;print(names)&#10;df[('attr','title')] = names&#10;&#10;for i in range(0,df.result['vecvalue'].shape[0]):&#10;    vals = df.result['vecvalue'][i]&#10;        &#10;    difference = [vals[x] - vals[x-1] for x in range(0,len(vals))]&#10;    difference[0] = vals[0]&#10;    &#10;    df.result['vecvalue'][i] = difference&#10;&#10;chart.plotVectors(df)&#10;&#10;chart.setProperty('X.Axis.Title', 'Time')&#10;chart.setProperty('Graph.Title', chart.getName())&#10;&#10;chart.setProperties(chart.getProperties())&#10;&#10;print(chart.getProperties())" type="LineChart">
            <property name="Graph.Title" value="Instantaneous packet delay variation, realistic bitrate qos"/>
            <property name="X.Axis.Title" value="Time [s]"/>
            <property name="Y.Axis.Title" value="Instantaneous packet delay variation [s]"/>
            <property name="Y.Axis.Min" value="-0.25"/>
            <property name="Y.Axis.Max" value="0.25"/>
            <property name="X.Axis.Min" value="0.5"/>
            <property name="Line.Name/QosThroughput.server.app[0]" value="background"/>
            <property name="Line.Name/QosThroughput.server.app[1]" value="best effort"/>
            <property name="Line.Name/QosThroughput.server.app[2]" value="video"/>
            <property name="Line.Name/QosThroughput.server.app[3]" value="voice"/>
            <property name="Line.Name/QosShowcase.server.app[0]" value="background"/>
            <property name="Line.Name/QosShowcase.server.app[1]" value="best effort"/>
            <property name="Line.Name/QosShowcase.server.app[2]" value="video"/>
            <property name="Line.Name/QosShowcase.server.app[3]" value="voice"/>
        </chart>
        <chart name="Throughput, realistic bitrate qos" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import chart&#10;&#10;filter_string = &quot;&quot;&quot;((module(*.server.app[3]) AND name(throughput:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[2]) AND name(throughput:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[1]) AND name(throughput:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[0]) AND name(throughput:vector) AND file(*RealisticBitrateQos-*)))&quot;&quot;&quot;&#10;&#10;df = results.getVectors(filter_string)&#10;&#10;df = results.getVectors(filter_string)&#10;&#10;df = results.transform_results(df)&#10;&#10;# print(df.result['vecvalue'])&#10;&#10;df.result['vecvalue'] /= 1000000&#10;&#10;modulenames = list(df.index.get_level_values('module'))&#10;&#10;props = chart.getProperties()&#10;&#10;# print(&quot;props&quot;)&#10;# print(props)&#10;&#10;names = [props[&quot;Line.Name/&quot; + i] for i in modulenames]&#10;&#10;# print(&quot;names&quot;)&#10;# print(names)&#10;&#10;df[('attr','title')] = names&#10;&#10;chart.plotVectors(df)&#10;&#10;chart.setProperty('X.Axis.Title', 'Time')&#10;chart.setProperty('Graph.Title', chart.getName())&#10;&#10;chart.setProperties(chart.getProperties())&#10;" type="LineChart">
            <property name="Graph.Title" value="Throughput, realistic bitrate qos"/>
            <property name="X.Axis.Title" value="Time [s]"/>
            <property name="Y.Axis.Title" value="Throughput [Mbps]"/>
            <property name="X.Axis.Min" value="0.5"/>
            <property name="X.Axis.Max" value="8.0"/>
            <property name="Line.Name/QosThroughput.server.app[0]" value="background"/>
            <property name="Line.Name/QosThroughput.server.app[1]" value="best effort"/>
            <property name="Line.Name/QosThroughput.server.app[2]" value="video"/>
            <property name="Line.Name/QosThroughput.server.app[3]" value="voice"/>
            <property name="Line.Name/QosShowcase.server.app[0]" value="background"/>
            <property name="Line.Name/QosShowcase.server.app[1]" value="best effort"/>
            <property name="Line.Name/QosShowcase.server.app[2]" value="video"/>
            <property name="Line.Name/QosShowcase.server.app[3]" value="voice"/>
            <property name="Symbols.Type/QosShowcase.server.app[0]" value="Square"/>
            <property name="Line.Color/QosShowcase.server.app[0]" value="darkblue"/>
            <property name="Symbols.Type/QosShowcase.server.app[1]" value="Dot"/>
            <property name="Line.Color/QosShowcase.server.app[1]" value="red"/>
            <property name="Symbols.Type/QosShowcase.server.app[2]" value="Triangle"/>
            <property name="Line.Color/QosShowcase.server.app[2]" value="darkgreen"/>
            <property name="Symbols.Type/QosShowcase.server.app[3]" value="Diamond"/>
            <property name="Line.Color/QosShowcase.server.app[3]" value="orange"/>
        </chart>
        <chart name="End-to-end delay, qos" script="import results&#10;import matplotlib.pyplot as plt&#10;import matplotlib as mpl&#10;&#10;filter_string = &quot;&quot;&quot;&#10;ADD vectors WHERE run(RealisticBitrateQos*) AND module(QosShowcase.server.app[*]) AND name(endToEndDelay:vector)&#10;&#10;&quot;&quot;&quot;&#10;&#10;df_orig = results.getVectors(filter_string)&#10;df_v = df_orig[df_orig.type == 'vector']&#10;&#10;df = results.getVectors(filter_string)&#10;&#10;df = results.transform_results(df)&#10;&#10;print(&quot;df:&quot;, df)&#10;&#10;plt.xlabel('Time [s]')&#10;plt.ylabel('End-to-end delay [s]')&#10;&#10;mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=[&quot;orange&quot;, &quot;green&quot;, &quot;red&quot;, &quot;darkblue&quot;])&#10;&#10;print(&quot;df_v:&quot;, df_v)&#10;&#10;print(&quot;HERE:&quot;, df_v['module'])&#10;&#10;for i in df_v['module']:&#10;    print(&quot;i:&quot;,i)&#10;&#10;#markers = ['.', 's', '^', 'd']&#10;markers = ['s', 's', 's', 's']&#10;markersizes = [2, 2, 2, 2]&#10;&#10;i = 0&#10;name = &quot;undefined&quot;&#10;for t in df_v[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    if(t[2] == 'QosShowcase.server.app[0]'):&#10;        name = 'background'&#10;    if(t[2] == 'QosShowcase.server.app[1]'):&#10;        name = 'best effort'&#10;    if(t[2] == 'QosShowcase.server.app[2]'):&#10;        name = 'video'&#10;    if(t[2] == 'QosShowcase.server.app[3]'):&#10;        name = 'voice'&#10;    plt.plot(t[0], t[1], label=(name), drawstyle='default', linewidth=0, marker=markers[i], markersize=markersizes[i])&#10;    i += 1&#10;plt.legend()&#10;plt.title(&quot;&quot;&quot;endToEndDelay:vector QosShowcase.server.app[0]&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;ax = plt.gca()&#10;handles,labels = ax.get_legend_handles_labels()&#10;&#10;j = 0&#10;newhandles = handles&#10;newlabels = labels&#10;&#10;print(&quot;the orignal handles and labels:&quot;, handles, labels)&#10;print(&quot;the new ones:&quot;, newhandles, newlabels)&#10;&#10;for i in labels:&#10;    print(&quot;WTF&quot;,i)&#10;&#10;for i in labels:&#10;    print(&quot;original_label:&quot;,i)&#10;    print(&quot;j:&quot;,j)&#10;    if(i == &quot;background&quot;):&#10;        newhandles[0] = handles[j]&#10;        newlabels[0] = labels[j]&#10;        print(&quot;assigned(0):&quot;,newlabels[0], newhandles[0])&#10;    elif(i == &quot;best effort&quot;):&#10;        newhandles[1] = handles[j]&#10;        newlabels[1] = labels[j]&#10;        print(&quot;assigned(1):&quot;,newlabels[1], newhandles[1])&#10;    elif(i == &quot;video&quot;):&#10;        newhandles[2] = handles[j]&#10;        newlabels[2] = labels[j]&#10;        print(&quot;assigned(2):&quot;,newlabels[2], newhandles[2])&#10;    elif(i == &quot;voice&quot;):&#10;        newhandles[3] = handles[j]&#10;        newlabels[3] = labels[j]&#10;        print(&quot;assigned(3):&quot;,newlabels[3], newhandles[3])&#10;    else:&#10;        print(&quot;something's wrong&quot;)&#10;    j += 1&#10;&#10;print(&quot;HERE:&quot;, newhandles, newlabels)&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;" type="MatplotlibChart"/>
        <chart name="End-to-end delay, qos" script="import results&#10;import chart&#10;import matplotlib.pyplot as plt&#10;&#10;filter_string = &quot;&quot;&quot;((module(*.server.app[0]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[1]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[2]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[3]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*)))&quot;&quot;&quot;&#10;&#10;df = results.getVectors(filter_string)&#10;&#10;df = results.transform_results(df)&#10;&#10;&#10;&#10;modulenames = list(df.index.get_level_values('module'))&#10;props = {'X.Axis.Min': '0.5', 'Line.Name/QosThroughput.server.app[2]': 'video', 'Line.Name/QosThroughput.server.app[3]': 'voice', 'Line.Name/QosShowcase.server.app[0]': 'background', 'Y.Axis.Title': 'End-to-end delay [s]', 'Line.Name/QosThroughput.server.app[0]': 'background', 'Line.Name/QosShowcase.server.app[2]': 'video', 'Line.Name/QosThroughput.server.app[1]': 'best effort', 'Line.Name/QosShowcase.server.app[1]': 'best effort', 'Line.Name/QosShowcase.server.app[3]': 'voice', 'Graph.Title': 'End-to-end delay, equal bitrate non-qos', 'Legend.Display': 'true', 'X.Axis.Title': 'Time [s]'}&#10;&#10;names = [props[&quot;Line.Name/&quot; + i] for i in modulenames]&#10;&#10;# keys = [&quot;Line.Name/&quot; + i for i in modulenames]&#10;# names = [props[k] if k in props else &quot;default&quot; for k in keys]&#10;&#10;&#10;print(names)&#10;df[('attr','title')] = names&#10;&#10;plt.figure(figsize=(7.5,4))&#10;&#10;for ind, row in df.iterrows():&#10;    times = row[('result', 'vectime')]&#10;    values = row[('result', 'vecvalue')]&#10;    label = row[('attr', 'title')]&#10;    print(label)&#10;    plt.plot(times, values, linewidth=0, marker='.', markersize=2, label=label)&#10;plt.legend()&#10;plt.tight_layout(1.5)&#10;&#10;ymin, ymax = plt.ylim()&#10;&#10;plt.ylim(ymin, 2)&#10;&#10;ticklocs, ticklabels = plt.yticks()&#10;&#10;print(&quot;ticks: &quot;, ticklocs, ticklabels)&#10;&#10;plt.yticks([0, 0.5, 1, 1.5, 2])&#10;&#10;plt.grid(b=True, which='major', axis='both', linestyle='--')&#10;&#10;plt.xlabel('Time [s]')&#10;plt.ylabel('End-to-end delay [s]')&#10;plt.title('End-to-end delay, QoS')&#10;&quot;&quot;&quot;&#10;chart.setProperty('X.Axis.Title', 'Time')&#10;chart.setProperty('Graph.Title', chart.getName())&#10;&#10;chart.setProperties(chart.getProperties())&#10;chart.setProperty('Line.Title/QosThroughput.server.app[3]', 'voice')&#10;print(chart.getProperties())&#10;print(chart.getDefaultProperties())&#10;&quot;&quot;&quot;&#10;&#10;plt.savefig('delay_qos.png', dpi=150, transparent=True)" type="MatplotlibChart"/>
        <chart name="" script="import results&#10;import chart&#10;import matplotlib.pyplot as plt&#10;&#10;filter_string = &quot;&quot;&quot;((module(*.server.app[0]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[1]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[2]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*))&#10;  OR (module(*.server.app[3]) AND name(endToEndDelay:vector) AND file(*RealisticBitrateQos-*)))&quot;&quot;&quot;&#10;&#10;df = results.getVectors(filter_string)&#10;&#10;df = results.transform_results(df)&#10;&#10;&#10;&#10;modulenames = list(df.index.get_level_values('module'))&#10;props = {'X.Axis.Min': '0.5', 'Line.Name/QosThroughput.server.app[2]': 'video', 'Line.Name/QosThroughput.server.app[3]': 'voice', 'Line.Name/QosShowcase.server.app[0]': 'background', 'Y.Axis.Title': 'End-to-end delay [s]', 'Line.Name/QosThroughput.server.app[0]': 'background', 'Line.Name/QosShowcase.server.app[2]': 'video', 'Line.Name/QosThroughput.server.app[1]': 'best effort', 'Line.Name/QosShowcase.server.app[1]': 'best effort', 'Line.Name/QosShowcase.server.app[3]': 'voice', 'Graph.Title': 'End-to-end delay, equal bitrate non-qos', 'Legend.Display': 'true', 'X.Axis.Title': 'Time [s]'}&#10;&#10;names = [props[&quot;Line.Name/&quot; + i] for i in modulenames]&#10;&#10;# keys = [&quot;Line.Name/&quot; + i for i in modulenames]&#10;# names = [props[k] if k in props else &quot;default&quot; for k in keys]&#10;&#10;&#10;print(names)&#10;df[('attr','title')] = names&#10;&#10;for ind, row in df.iterrows():&#10;    times = row[('result', 'vectime')]&#10;    values = row[('result', 'vecvalue')]&#10;    label = row[('attr', 'title')]&#10;    print(label)&#10;    plt.plot(times, values, linewidth=0, marker='.', markersize=2, label=label)&#10;plt.legend()&#10;&quot;&quot;&quot;&#10;chart.setProperty('X.Axis.Title', 'Time')&#10;chart.setProperty('Graph.Title', chart.getName())&#10;&#10;chart.setProperties(chart.getProperties())&#10;chart.setProperty('Line.Title/QosThroughput.server.app[3]', 'voice')&#10;print(chart.getProperties())&#10;print(chart.getDefaultProperties())&#10;&quot;&quot;&quot;" type="MatplotlibChart"/>
    </charts>
</analysis>
